% The main executible file responsible for the classification

%% Path setup
% global paths

basepath = '~/Desktop/Math/teeth_classification/';

% set up input paths (absolute paths only)
paths.in.data = [basepath 'data/'];
paths.in.label = [basepath 'data/Boyer_with_order.xlsx'];

paths.in.sinkhorn = [basepath 'include/sinkhorn/'];
paths.in.toolboxGeneral = [basepath 'include/toolbox_general/'];
paths.in.toolboxSignal = [basepath 'include/toolbox_signal/'];
paths.in.ripser = [basepath 'include/ripser-master/'];
paths.in.javaplex = [basepath 'include/appliedtopology-javaplex-6a2ef48/'];
paths.in.shortloop = [basepath 'include/ShortLoop/'];
paths.in.hera = [basepath 'include/hera/'];

% set up output paths
paths.out.fps = [basepath 'data/cache/fps/'];
paths.out.localDist = [basepath 'data/cache/localDist/'];
paths.out.filledTriangle = [basepath 'data/cache/filledTriangle/'];
paths.out.tlb = [basepath 'data/cache/tlb/'];
paths.out.dgm = [basepath 'data/cache/dgm/'];
paths.out.db = [basepath 'data/cache/db/'];

paths.out.fig = [basepath 'out/figures/'];
paths.out.pe = [basepath 'out/Pe/'];

% create folders for each output field
fn = fieldnames(paths.out);
for i = 1:numel(fn)-1
    mkdir([basepath 'data/cache/' fn{i}]);
end
mkdir(paths.out.fig)
mkdir(paths.out.pe)

%% Choose approach
% % choose from 'OT' (optimal transport)
% %          or 'PH' (persistent homology)
approach = 'OT';
D = 0.3;
epsilon = 0.05;
niter = 10; % number of iterations for sinkhorn solver, changes with choice of epsilon
norm = false;
K = 2000;


% % parameters for the PH approach
% approach = 'PH';
% % choices of filtration inlcudes: VR, VR_modified, maxMeancurv,
% % absMeancurv, MinusAbsMeancurv
% filtration = 'absMeancurv';
% norm = false;
% maxdim = 1; 
% numPoints = 500;

%% Parameters setup

if strcmp(approach,'OT')
    params = param_setup_OT('uniform','euc',norm,D,epsilon, K, niter);
elseif strcmp(approach,'PH')
    params = param_setup_PH(filtration,'euc',norm,'bt',maxdim,numPoints);
else
    disp('Invalid approach')
end

%% Clean data (fill cavities)
fill_cavities(paths);

%% Compute distance matrix
dm = compute_distance_matrix(paths,params);

%% Classification accuracy
% classify using leave-one-out
Pe = zeros(params.maxdim,1);
fig = cell(params.maxdim);

% load labels by category: family, genus, diet
category = 'diet';
true_label = load_label(paths,category);

savename = savename_setup(params);

for i = 1:params.maxdim
    % compute the probability of error
    predict = leave_one_out(dm{i},true_label);
    Pe(i) = sum(true_label==predict)/length(true_label);

    % plot distance matrix and single-linkage dendrogram
    fig{i} = clustergram(dm{i},'ColumnLabels',true_label);
    savefig(gcf,[paths.out.fig savename '_dim' num2str(i) '.jpg'])
end
save([paths.out.pe savename '.mat'],'Pe')